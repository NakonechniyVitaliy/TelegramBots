import telebot
import requests
import json
from telebot import types
import pendulum


bot = telebot.TeleBot('6004819473:AAEChj6FYurBInriyyJUPp9T8eIEejNLkxU')
API = 'a8cf8f805d6dd6a06343ef2612485021'

today = pendulum.today('Europe/Kiev').format('MM-DD')
tomorrow = pendulum.tomorrow('Europe/Kiev').format('MM-DD')

city = 'None'


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –Ω–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É')
    bot.register_next_step_handler(message, town)


def town(message):
    global city
    city = str(message.text.strip())
    res = requests.get(f'https://api.openweathermap.org/data/2.5/forecast/?q={city}&appid={API}&units=metric',
                       params={'lang': 'ru'})
    if res.status_code == 200:
        markup = types.InlineKeyboardMarkup(row_width=1)
        btn0 = types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å', callback_data='now')
        btn1 = types.InlineKeyboardButton('–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data='today')
        btn2 = types.InlineKeyboardButton('–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', callback_data='tomorrow')
        btn3 = types.InlineKeyboardButton('–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π', callback_data='week')
        markup.add(btn0, btn1, btn2, btn3)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ ‚òÄ‚õÖ‚òÅÔ∏è', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω—ã–π –≥–æ—Ä–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
        bot.register_next_step_handler(message, town)


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    res = requests.get(f'https://api.openweathermap.org/data/2.5/forecast/?q={city}&appid={API}&units=metric',
                       params={'lang': 'ru'})
    data = json.loads(res.text)
    for i in data['list']:
        forecast = (i['dt_txt'][5:16], '{0:+3.0f}'.format(i['main']['temp']), i['weather'][0]['description'])
        forecast = list(forecast)
        if forecast[2] == '–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å':
            forecast[2] = '–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å üå§'
        elif forecast[2] == '—è—Å–Ω–æ':
            forecast[2] = '—è—Å–Ω–æ ‚òÄÔ∏è'
        elif forecast[2] == '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏':
            forecast[2] = '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ ‚õÖÔ∏è'
        elif forecast[2] == '–ø–∞—Å–º—É—Ä–Ω–æ':
            forecast[2] = '–ø–∞—Å–º—É—Ä–Ω–æ ‚òÅÔ∏è'
        elif forecast[2] == '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å':
            forecast[2] = '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üå¶'
        elif forecast[2] == '–¥–æ–∂–¥—å':
            forecast[2] = '–¥–æ–∂–¥—å üåß'
        elif forecast[2] == '—Å–Ω–µ–≥':
            forecast[2] = '—Å–Ω–µ–≥ üå®'
        elif forecast[2] == '–≥—Ä–æ–∑–∞ ':
            forecast[2] = '–≥—Ä–æ–∑–∞ ‚õà'
        elif forecast[2] == '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å':
            forecast[2] = '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å üå•'

        if call.data == 'today':
            if forecast[0][:5] == today:
                if forecast[0][6:] == '03:00' or forecast[0][6:] == '09:00' or \
                        forecast[0][6:] == '15:00' or forecast[0][6:] == '21:00':
                    forecast_message = (f'–í—Ä–µ–º—è: {forecast[0]} \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {forecast[1]}¬∞ \n–ù–µ–±–æ: {forecast[2]}')
                    bot.send_message(call.message.chat.id, forecast_message)

        if call.data == 'tomorrow':
            if forecast[0][:5] == tomorrow:
                if forecast[0][6:] == '03:00' or forecast[0][6:] == '09:00' or \
                        forecast[0][6:] == '15:00' or forecast[0][6:] == '21:00':
                    forecast_message = (f'–í—Ä–µ–º—è: {forecast[0]} \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {forecast[1]}¬∞ \n–ù–µ–±–æ: {forecast[2]}')
                    bot.send_message(call.message.chat.id, forecast_message)

        if call.data == 'week':
            if forecast[0][6:] == '03:00' or forecast[0][6:] == '09:00' or \
                    forecast[0][6:] == '15:00' or forecast[0][6:] == '21:00':
                forecast_message = (f'–í—Ä–µ–º—è: {forecast[0]} \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {forecast[1]}¬∞ \n–ù–µ–±–æ: {forecast[2]}')
                bot.send_message(call.message.chat.id, forecast_message)

    if call.data == 'now':
        res_2 = requests.get(f'https://api.openweathermap.org/data/2.5/weather/?q={city}&appid={API}&units=metric',
                           params={'lang': 'ru'})
        data_2 = json.loads(res_2.text)
        bot.send_message(call.message.chat.id, f"–°–µ–π—á–∞—Å: {int(data_2['main']['temp'])}¬∞")
        main = data_2["weather"]
        main_2 = main[0]
        weather = main_2['main']
        if weather == 'Clear':
            bot.send_message(call.message.chat.id, '‚òÄÔ∏è')
        if weather == 'Clouds':
            bot.send_message(call.message.chat.id, '‚òÅÔ∏è')
        if weather == 'Rain':
            bot.send_message(call.message.chat.id, 'üåßÔ∏è')
        if weather == 'Snow':
            bot.send_message(call.message.chat.id, 'üå®Ô∏è')

    bot.send_message(call.message.chat.id, '–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥')
    bot.register_next_step_handler(call.message, town)


bot.polling(none_stop=True)
